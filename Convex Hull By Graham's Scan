/// Convex Hull using Graham's Scan
// Complexity O(nlog n)
#include<bits/stdc++.h>
using namespace std;
struct Point
{
    int x,y;
};
Point p0;
int Orientation(Point p1,Point p2,Point p3){
    int val = (p2.y - p1.y)*(p3.x-p2.x) - (p3.y-p2.y)*(p2.x-p1.x);
    if(val == 0) return 0; //colinear
    if(val > 0) return 1; // Clockwise
    else return - 1; //Counter Clockwise
}
bool cmp(Point p1, Point p2){
    int val = Orientation(p0,p1,p2);
    if(val == 0){
        return (p1.x*p1.x + p1.y*p1.y) < (p2.x*p2.x + p2.y*p2.y); // If both points are collinear with respect to p0, then the point closer to p0 comes first 
    }
    return val == -1; // counter Clockwise
}

void ConvexHull(){
    int n; cin >> n;
    Point point[n];
    for(int i = 0; i < n; i++){
        int x,y; cin >> x >> y;
        point[i].x = x;
        point[i].y = y;
    }
    int min_indx = 0;
    for(int i = 1; i < n; i++){
        if(point[i].y < point[min_indx].y){
            min_indx = i;
        }
    }
    swap(point[0],point[min_indx]);
    p0 = point[0];
    sort(point+1,point+n,cmp);
    stack<Point>stk;
    stk.push(point[0]);
    stk.push(point[1]);
    for(int i = 2; i < n; i++){
        Point Top = stk.top();
        stk.pop();
        int val = Orientation(stk.top(),Top,point[i]);
        if(val == -1){
            stk.push(Top);
        }
        stk.push(point[i]);
    }

    while(!stk.empty()){
         cout << stk.top().x << "," << stk.top().y << endl;
         stk.pop();
    }

}
int main(){
    ios::sync_with_stdio(false);cin.tie(0);
#ifndef ONLINE_JUDGE
freopen("input.txt","r",stdin); 
freopen("output.txt","w",stdout); 
#endif
  
    ConvexHull();
}
